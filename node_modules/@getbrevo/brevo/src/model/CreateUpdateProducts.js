/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.CreateUpdateProducts = factory(root.Brevo.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The CreateUpdateProducts model module.
   * @module model/CreateUpdateProducts
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CreateUpdateProducts</code>.
   * @alias module:model/CreateUpdateProducts
   * @class
   * @param id {String} Product ID for which you requested the details
   * @param name {String} Mandatory in case of creation**. Name of the product for which you requested the details
   */
  var exports = function(id, name) {
    this.id = id;
    this.name = name;
  };

  /**
   * Constructs a <code>CreateUpdateProducts</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateUpdateProducts} obj Optional instance to populate.
   * @return {module:model/CreateUpdateProducts} The populated <code>CreateUpdateProducts</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('imageUrl'))
        obj.imageUrl = ApiClient.convertToType(data['imageUrl'], 'String');
      if (data.hasOwnProperty('sku'))
        obj.sku = ApiClient.convertToType(data['sku'], 'String');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'Number');
      if (data.hasOwnProperty('categories'))
        obj.categories = ApiClient.convertToType(data['categories'], ['String']);
      if (data.hasOwnProperty('parentId'))
        obj.parentId = ApiClient.convertToType(data['parentId'], 'String');
      if (data.hasOwnProperty('metaInfo'))
        obj.metaInfo = ApiClient.convertToType(data['metaInfo'], {'String': 'String'});
      if (data.hasOwnProperty('deletedAt'))
        obj.deletedAt = ApiClient.convertToType(data['deletedAt'], 'String');
    }
    return obj;
  }

  /**
   * Product ID for which you requested the details
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Mandatory in case of creation**. Name of the product for which you requested the details
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * URL to the product
   * @member {String} url
   */
  exports.prototype.url = undefined;

  /**
   * Absolute URL to the cover image of the product
   * @member {String} imageUrl
   */
  exports.prototype.imageUrl = undefined;

  /**
   * Product identifier from the shop
   * @member {String} sku
   */
  exports.prototype.sku = undefined;

  /**
   * Price of the product
   * @member {Number} price
   */
  exports.prototype.price = undefined;

  /**
   * Category ID-s of the product
   * @member {Array.<String>} categories
   */
  exports.prototype.categories = undefined;

  /**
   * Parent product id of the product
   * @member {String} parentId
   */
  exports.prototype.parentId = undefined;

  /**
   * Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10.
   * @member {Object.<String, String>} metaInfo
   */
  exports.prototype.metaInfo = undefined;

  /**
   * UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database
   * @member {String} deletedAt
   */
  exports.prototype.deletedAt = undefined;


  return exports;

}));
