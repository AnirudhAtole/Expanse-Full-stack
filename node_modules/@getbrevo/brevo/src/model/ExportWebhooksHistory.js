/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.ExportWebhooksHistory = factory(root.Brevo.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ExportWebhooksHistory model module.
   * @module model/ExportWebhooksHistory
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>ExportWebhooksHistory</code>.
   * @alias module:model/ExportWebhooksHistory
   * @class
   * @param event {module:model/ExportWebhooksHistory.EventEnum} Filter the history for a specific event type
   * @param notifyURL {String} Webhook URL to receive CSV file link
   */
  var exports = function(event, notifyURL) {
    this.event = event;
    this.notifyURL = notifyURL;
  };

  /**
   * Constructs a <code>ExportWebhooksHistory</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExportWebhooksHistory} obj Optional instance to populate.
   * @return {module:model/ExportWebhooksHistory} The populated <code>ExportWebhooksHistory</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('days'))
        obj.days = ApiClient.convertToType(data['days'], 'Number');
      if (data.hasOwnProperty('startDate'))
        obj.startDate = ApiClient.convertToType(data['startDate'], 'String');
      if (data.hasOwnProperty('endDate'))
        obj.endDate = ApiClient.convertToType(data['endDate'], 'String');
      if (data.hasOwnProperty('sort'))
        obj.sort = ApiClient.convertToType(data['sort'], 'String');
      if (data.hasOwnProperty('event'))
        obj.event = ApiClient.convertToType(data['event'], 'String');
      if (data.hasOwnProperty('notifyURL'))
        obj.notifyURL = ApiClient.convertToType(data['notifyURL'], 'String');
      if (data.hasOwnProperty('webhookId'))
        obj.webhookId = ApiClient.convertToType(data['webhookId'], 'Number');
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('messageId'))
        obj.messageId = ApiClient.convertToType(data['messageId'], 'Number');
    }
    return obj;
  }

  /**
   * Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
   * @member {Number} days
   */
  exports.prototype.days = undefined;

  /**
   * Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate
   * @member {String} startDate
   */
  exports.prototype.startDate = undefined;

  /**
   * Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
   * @member {String} endDate
   */
  exports.prototype.endDate = undefined;

  /**
   * Sorting order of records (asc or desc)
   * @member {String} sort
   */
  exports.prototype.sort = undefined;

  /**
   * Filter the history for a specific event type
   * @member {module:model/ExportWebhooksHistory.EventEnum} event
   */
  exports.prototype.event = undefined;

  /**
   * Webhook URL to receive CSV file link
   * @member {String} notifyURL
   */
  exports.prototype.notifyURL = undefined;

  /**
   * Filter the history for a specific webhook id
   * @member {Number} webhookId
   */
  exports.prototype.webhookId = undefined;

  /**
   * Filter the history for a specific email
   * @member {String} email
   */
  exports.prototype.email = undefined;

  /**
   * Filter the history for a specific message id
   * @member {Number} messageId
   */
  exports.prototype.messageId = undefined;



  /**
   * Allowed values for the <code>event</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EventEnum = {
    /**
     * value: "invalid_parameter"
     * @const
     */
    invalidParameter: "invalid_parameter",

    /**
     * value: "missing_parameter"
     * @const
     */
    missingParameter: "missing_parameter",

    /**
     * value: "hardBounce"
     * @const
     */
    hardBounce: "hardBounce",

    /**
     * value: "softBounce"
     * @const
     */
    softBounce: "softBounce",

    /**
     * value: "delivered\""
     * @const
     */
    delivered: "delivered\"",

    /**
     * value: "spam"
     * @const
     */
    spam: "spam",

    /**
     * value: "request"
     * @const
     */
    request: "request",

    /**
     * value: "opened"
     * @const
     */
    opened: "opened",

    /**
     * value: "click"
     * @const
     */
    click: "click",

    /**
     * value: "invalid"
     * @const
     */
    invalid: "invalid",

    /**
     * value: "deferred"
     * @const
     */
    deferred: "deferred",

    /**
     * value: "blocked"
     * @const
     */
    blocked: "blocked",

    /**
     * value: "unsubscribed"
     * @const
     */
    unsubscribed: "unsubscribed",

    /**
     * value: "error"
     * @const
     */
    error: "error",

    /**
     * value: "uniqueOpened"
     * @const
     */
    uniqueOpened: "uniqueOpened",

    /**
     * value: "loadedByProxy"
     * @const
     */
    loadedByProxy: "loadedByProxy",

    /**
     * value: "allEvents"
     * @const
     */
    allEvents: "allEvents"
  };

  return exports;

}));
