/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateModel', 'model/CreateWhatsAppCampaign', 'model/CreateWhatsAppTemplate', 'model/ErrorModel', 'model/GetWATemplates', 'model/GetWhatsAppConfig', 'model/GetWhatsappCampaignOverview', 'model/GetWhatsappCampaigns', 'model/UpdateWhatsAppCampaign'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateWhatsAppCampaign'), require('../model/CreateWhatsAppTemplate'), require('../model/ErrorModel'), require('../model/GetWATemplates'), require('../model/GetWhatsAppConfig'), require('../model/GetWhatsappCampaignOverview'), require('../model/GetWhatsappCampaigns'), require('../model/UpdateWhatsAppCampaign'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.WhatsAppCampaignsApi = factory(root.Brevo.ApiClient, root.Brevo.CreateModel, root.Brevo.CreateWhatsAppCampaign, root.Brevo.CreateWhatsAppTemplate, root.Brevo.ErrorModel, root.Brevo.GetWATemplates, root.Brevo.GetWhatsAppConfig, root.Brevo.GetWhatsappCampaignOverview, root.Brevo.GetWhatsappCampaigns, root.Brevo.UpdateWhatsAppCampaign);
  }
}(this, function(ApiClient, CreateModel, CreateWhatsAppCampaign, CreateWhatsAppTemplate, ErrorModel, GetWATemplates, GetWhatsAppConfig, GetWhatsappCampaignOverview, GetWhatsappCampaigns, UpdateWhatsAppCampaign) {
  'use strict';

  /**
   * WhatsAppCampaigns service.
   * @module api/WhatsAppCampaignsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new WhatsAppCampaignsApi. 
   * @alias module:api/WhatsAppCampaignsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create and Send a WhatsApp campaign
     * @param {module:model/CreateWhatsAppCampaign} whatsAppCampaigns Values to create a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response
     */
    this.createWhatsAppCampaignWithHttpInfo = function(whatsAppCampaigns) {
      var postBody = whatsAppCampaigns;

      // verify the required parameter 'whatsAppCampaigns' is set
      if (whatsAppCampaigns === undefined || whatsAppCampaigns === null) {
        throw new Error("Missing the required parameter 'whatsAppCampaigns' when calling createWhatsAppCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/whatsappCampaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create and Send a WhatsApp campaign
     * @param {module:model/CreateWhatsAppCampaign} whatsAppCampaigns Values to create a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}
     */
    this.createWhatsAppCampaign = function(whatsAppCampaigns) {
      return this.createWhatsAppCampaignWithHttpInfo(whatsAppCampaigns)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a WhatsApp template
     * @param {module:model/CreateWhatsAppTemplate} whatsAppTemplates Values to create a template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response
     */
    this.createWhatsAppTemplateWithHttpInfo = function(whatsAppTemplates) {
      var postBody = whatsAppTemplates;

      // verify the required parameter 'whatsAppTemplates' is set
      if (whatsAppTemplates === undefined || whatsAppTemplates === null) {
        throw new Error("Missing the required parameter 'whatsAppTemplates' when calling createWhatsAppTemplate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/whatsppCampaigns/template', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a WhatsApp template
     * @param {module:model/CreateWhatsAppTemplate} whatsAppTemplates Values to create a template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}
     */
    this.createWhatsAppTemplate = function(whatsAppTemplates) {
      return this.createWhatsAppTemplateWithHttpInfo(whatsAppTemplates)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a WhatsApp campaign
     * @param {Number} campaignId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteWhatsAppCampaignWithHttpInfo = function(campaignId) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteWhatsAppCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/whatsappCampaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a WhatsApp campaign
     * @param {Number} campaignId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteWhatsAppCampaign = function(campaignId) {
      return this.deleteWhatsAppCampaignWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a WhatsApp campaign
     * @param {Number} campaignId Id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWhatsappCampaignOverview} and HTTP response
     */
    this.getWhatsAppCampaignWithHttpInfo = function(campaignId) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getWhatsAppCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWhatsappCampaignOverview;

      return this.apiClient.callApi(
        '/whatsappCampaigns/{campaignId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a WhatsApp campaign
     * @param {Number} campaignId Id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWhatsappCampaignOverview}
     */
    this.getWhatsAppCampaign = function(campaignId) {
      return this.getWhatsAppCampaignWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all your created WhatsApp campaigns
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {String} opts.endDate **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWhatsappCampaigns} and HTTP response
     */
    this.getWhatsAppCampaignsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWhatsappCampaigns;

      return this.apiClient.callApi(
        '/whatsappCampaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all your created WhatsApp campaigns
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {String} opts.endDate **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWhatsappCampaigns}
     */
    this.getWhatsAppCampaigns = function(opts) {
      return this.getWhatsAppCampaignsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get your WhatsApp API account information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWhatsAppConfig} and HTTP response
     */
    this.getWhatsAppConfigWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWhatsAppConfig;

      return this.apiClient.callApi(
        '/whatsappCampaigns/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get your WhatsApp API account information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWhatsAppConfig}
     */
    this.getWhatsAppConfig = function() {
      return this.getWhatsAppConfigWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all your created WhatsApp templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {String} opts.endDate **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWATemplates} and HTTP response
     */
    this.getWhatsAppTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWATemplates;

      return this.apiClient.callApi(
        '/whatsappCampaigns/template-list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all your created WhatsApp templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {String} opts.endDate **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result** 
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWATemplates}
     */
    this.getWhatsAppTemplates = function(opts) {
      return this.getWhatsAppTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send your WhatsApp template for approval
     * @param {Number} templateId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sendWhatsAppTemplateApprovalWithHttpInfo = function(templateId) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling sendWhatsAppTemplateApproval");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/whatsappCampaigns/template/approval/{templateId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send your WhatsApp template for approval
     * @param {Number} templateId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sendWhatsAppTemplateApproval = function(templateId) {
      return this.sendWhatsAppTemplateApprovalWithHttpInfo(templateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a WhatsApp campaign
     * @param {Number} campaignId Id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWhatsAppCampaign} opts.whatsAppCampaign values to update WhatsApp Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateWhatsAppCampaignWithHttpInfo = function(campaignId, opts) {
      opts = opts || {};
      var postBody = opts['whatsAppCampaign'];

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateWhatsAppCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/whatsappCampaigns/{campaignId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a WhatsApp campaign
     * @param {Number} campaignId Id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWhatsAppCampaign} opts.whatsAppCampaign values to update WhatsApp Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateWhatsAppCampaign = function(campaignId, opts) {
      return this.updateWhatsAppCampaignWithHttpInfo(campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
