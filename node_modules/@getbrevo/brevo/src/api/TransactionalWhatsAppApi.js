/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorModel', 'model/GetWhatsappEventReport', 'model/InlineResponse2013', 'model/SendWhatsappMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorModel'), require('../model/GetWhatsappEventReport'), require('../model/InlineResponse2013'), require('../model/SendWhatsappMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.TransactionalWhatsAppApi = factory(root.Brevo.ApiClient, root.Brevo.ErrorModel, root.Brevo.GetWhatsappEventReport, root.Brevo.InlineResponse2013, root.Brevo.SendWhatsappMessage);
  }
}(this, function(ApiClient, ErrorModel, GetWhatsappEventReport, InlineResponse2013, SendWhatsappMessage) {
  'use strict';

  /**
   * TransactionalWhatsApp service.
   * @module api/TransactionalWhatsAppApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TransactionalWhatsAppApi. 
   * @alias module:api/TransactionalWhatsAppApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get all your WhatsApp activity (unaggregated events)
     * This endpoint will show the unaggregated statistics for WhatsApp activity (30 days by default if `startDate` and `endDate` or `days` is not passed. The date range can not exceed 90 days)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number limitation for the result returned (default to 2500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from (default to 0)
     * @param {String} opts.startDate **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate 
     * @param {String} opts.endDate **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate 
     * @param {Number} opts.days Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_ 
     * @param {String} opts.contactNumber Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
     * @param {module:model/String} opts.event Filter the report for a specific event type
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWhatsappEventReport} and HTTP response
     */
    this.getWhatsappEventReportWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'days': opts['days'],
        'contactNumber': opts['contactNumber'],
        'event': opts['event'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWhatsappEventReport;

      return this.apiClient.callApi(
        '/whatsapp/statistics/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all your WhatsApp activity (unaggregated events)
     * This endpoint will show the unaggregated statistics for WhatsApp activity (30 days by default if `startDate` and `endDate` or `days` is not passed. The date range can not exceed 90 days)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number limitation for the result returned (default to 2500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from (default to 0)
     * @param {String} opts.startDate **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate 
     * @param {String} opts.endDate **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate 
     * @param {Number} opts.days Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_ 
     * @param {String} opts.contactNumber Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
     * @param {module:model/String} opts.event Filter the report for a specific event type
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWhatsappEventReport}
     */
    this.getWhatsappEventReport = function(opts) {
      return this.getWhatsappEventReportWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a WhatsApp message
     * This endpoint is used to send a WhatsApp message. <br/>(**The first message you send using the API must contain a Template ID. You must create a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
     * @param {module:model/SendWhatsappMessage} sendWhatsappMessage Values to send WhatsApp message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2013} and HTTP response
     */
    this.sendWhatsappMessageWithHttpInfo = function(sendWhatsappMessage) {
      var postBody = sendWhatsappMessage;

      // verify the required parameter 'sendWhatsappMessage' is set
      if (sendWhatsappMessage === undefined || sendWhatsappMessage === null) {
        throw new Error("Missing the required parameter 'sendWhatsappMessage' when calling sendWhatsappMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/whatsapp/sendMessage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a WhatsApp message
     * This endpoint is used to send a WhatsApp message. <br/>(**The first message you send using the API must contain a Template ID. You must create a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
     * @param {module:model/SendWhatsappMessage} sendWhatsappMessage Values to send WhatsApp message
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2013}
     */
    this.sendWhatsappMessage = function(sendWhatsappMessage) {
      return this.sendWhatsappMessageWithHttpInfo(sendWhatsappMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
