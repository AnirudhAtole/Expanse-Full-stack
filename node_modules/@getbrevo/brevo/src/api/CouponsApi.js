/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateCouponCollection', 'model/CreateCoupons', 'model/ErrorModel', 'model/GetCouponCollection', 'model/InlineResponse2001', 'model/InlineResponse2012', 'model/UpdateCouponCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateCouponCollection'), require('../model/CreateCoupons'), require('../model/ErrorModel'), require('../model/GetCouponCollection'), require('../model/InlineResponse2001'), require('../model/InlineResponse2012'), require('../model/UpdateCouponCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.CouponsApi = factory(root.Brevo.ApiClient, root.Brevo.CreateCouponCollection, root.Brevo.CreateCoupons, root.Brevo.ErrorModel, root.Brevo.GetCouponCollection, root.Brevo.InlineResponse2001, root.Brevo.InlineResponse2012, root.Brevo.UpdateCouponCollection);
  }
}(this, function(ApiClient, CreateCouponCollection, CreateCoupons, ErrorModel, GetCouponCollection, InlineResponse2001, InlineResponse2012, UpdateCouponCollection) {
  'use strict';

  /**
   * Coupons service.
   * @module api/CouponsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CouponsApi. 
   * @alias module:api/CouponsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create а coupon collection
     * @param {module:model/CreateCouponCollection} createCouponCollection Values to create a coupon collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2012} and HTTP response
     */
    this.createCouponCollectionWithHttpInfo = function(createCouponCollection) {
      var postBody = createCouponCollection;

      // verify the required parameter 'createCouponCollection' is set
      if (createCouponCollection === undefined || createCouponCollection === null) {
        throw new Error("Missing the required parameter 'createCouponCollection' when calling createCouponCollection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/couponCollections', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create а coupon collection
     * @param {module:model/CreateCouponCollection} createCouponCollection Values to create a coupon collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2012}
     */
    this.createCouponCollection = function(createCouponCollection) {
      return this.createCouponCollectionWithHttpInfo(createCouponCollection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create coupons for a coupon collection
     * @param {module:model/CreateCoupons} createCoupons Values to create coupons
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createCouponsWithHttpInfo = function(createCoupons) {
      var postBody = createCoupons;

      // verify the required parameter 'createCoupons' is set
      if (createCoupons === undefined || createCoupons === null) {
        throw new Error("Missing the required parameter 'createCoupons' when calling createCoupons");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/coupons', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create coupons for a coupon collection
     * @param {module:model/CreateCoupons} createCoupons Values to create coupons
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createCoupons = function(createCoupons) {
      return this.createCouponsWithHttpInfo(createCoupons)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a coupon collection by id
     * @param {String} id Id of the collection to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCouponCollection} and HTTP response
     */
    this.getCouponCollectionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCouponCollection");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCouponCollection;

      return this.apiClient.callApi(
        '/couponCollections/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a coupon collection by id
     * @param {String} id Id of the collection to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCouponCollection}
     */
    this.getCouponCollection = function(id) {
      return this.getCouponCollectionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all your coupon collections
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents returned per page (default to 50)
     * @param {Number} opts.offset Index of the first document on the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results by creation time in ascending/descending order (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCouponCollection} and HTTP response
     */
    this.getCouponCollectionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCouponCollection;

      return this.apiClient.callApi(
        '/couponCollections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all your coupon collections
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents returned per page (default to 50)
     * @param {Number} opts.offset Index of the first document on the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results by creation time in ascending/descending order (default to desc)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCouponCollection}
     */
    this.getCouponCollections = function(opts) {
      return this.getCouponCollectionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a coupon collection by id
     * @param {String} id Id of the collection to update
     * @param {module:model/UpdateCouponCollection} updateCouponCollection Values to update the coupon collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.updateCouponCollectionWithHttpInfo = function(id, updateCouponCollection) {
      var postBody = updateCouponCollection;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCouponCollection");
      }

      // verify the required parameter 'updateCouponCollection' is set
      if (updateCouponCollection === undefined || updateCouponCollection === null) {
        throw new Error("Missing the required parameter 'updateCouponCollection' when calling updateCouponCollection");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/couponCollections/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a coupon collection by id
     * @param {String} id Id of the collection to update
     * @param {module:model/UpdateCouponCollection} updateCouponCollection Values to update the coupon collection
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.updateCouponCollection = function(id, updateCouponCollection) {
      return this.updateCouponCollectionWithHttpInfo(id, updateCouponCollection)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
