/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateCategoryModel', 'model/CreateProductModel', 'model/CreateUpdateBatchCategory', 'model/CreateUpdateBatchCategoryModel', 'model/CreateUpdateBatchProducts', 'model/CreateUpdateBatchProductsModel', 'model/CreateUpdateCategory', 'model/CreateUpdateProduct', 'model/ErrorModel', 'model/GetCategories', 'model/GetCategoryDetails', 'model/GetProductDetails', 'model/GetProducts', 'model/Order', 'model/OrderBatch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateCategoryModel'), require('../model/CreateProductModel'), require('../model/CreateUpdateBatchCategory'), require('../model/CreateUpdateBatchCategoryModel'), require('../model/CreateUpdateBatchProducts'), require('../model/CreateUpdateBatchProductsModel'), require('../model/CreateUpdateCategory'), require('../model/CreateUpdateProduct'), require('../model/ErrorModel'), require('../model/GetCategories'), require('../model/GetCategoryDetails'), require('../model/GetProductDetails'), require('../model/GetProducts'), require('../model/Order'), require('../model/OrderBatch'));
  } else {
    // Browser globals (root is window)
    if (!root.Brevo) {
      root.Brevo = {};
    }
    root.Brevo.EcommerceApi = factory(root.Brevo.ApiClient, root.Brevo.CreateCategoryModel, root.Brevo.CreateProductModel, root.Brevo.CreateUpdateBatchCategory, root.Brevo.CreateUpdateBatchCategoryModel, root.Brevo.CreateUpdateBatchProducts, root.Brevo.CreateUpdateBatchProductsModel, root.Brevo.CreateUpdateCategory, root.Brevo.CreateUpdateProduct, root.Brevo.ErrorModel, root.Brevo.GetCategories, root.Brevo.GetCategoryDetails, root.Brevo.GetProductDetails, root.Brevo.GetProducts, root.Brevo.Order, root.Brevo.OrderBatch);
  }
}(this, function(ApiClient, CreateCategoryModel, CreateProductModel, CreateUpdateBatchCategory, CreateUpdateBatchCategoryModel, CreateUpdateBatchProducts, CreateUpdateBatchProductsModel, CreateUpdateCategory, CreateUpdateProduct, ErrorModel, GetCategories, GetCategoryDetails, GetProductDetails, GetProducts, Order, OrderBatch) {
  'use strict';

  /**
   * Ecommerce service.
   * @module api/EcommerceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EcommerceApi. 
   * @alias module:api/EcommerceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create orders in batch
     * Create multiple orders at one time instead of one order at a time
     * @param {module:model/OrderBatch} orderBatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createBatchOrderWithHttpInfo = function(orderBatch) {
      var postBody = orderBatch;

      // verify the required parameter 'orderBatch' is set
      if (orderBatch === undefined || orderBatch === null) {
        throw new Error("Missing the required parameter 'orderBatch' when calling createBatchOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/status/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create orders in batch
     * Create multiple orders at one time instead of one order at a time
     * @param {module:model/OrderBatch} orderBatch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createBatchOrder = function(orderBatch) {
      return this.createBatchOrderWithHttpInfo(orderBatch)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Managing the status of the order
     * Manages the transactional status of the order
     * @param {module:model/Order} order 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createOrderWithHttpInfo = function(order) {
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling createOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Managing the status of the order
     * Manages the transactional status of the order
     * @param {module:model/Order} order 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createOrder = function(order) {
      return this.createOrderWithHttpInfo(order)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create categories in batch
     * @param {module:model/CreateUpdateBatchCategory} createUpdateBatchCategory Values to create a batch of categories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUpdateBatchCategoryModel} and HTTP response
     */
    this.createUpdateBatchCategoryWithHttpInfo = function(createUpdateBatchCategory) {
      var postBody = createUpdateBatchCategory;

      // verify the required parameter 'createUpdateBatchCategory' is set
      if (createUpdateBatchCategory === undefined || createUpdateBatchCategory === null) {
        throw new Error("Missing the required parameter 'createUpdateBatchCategory' when calling createUpdateBatchCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUpdateBatchCategoryModel;

      return this.apiClient.callApi(
        '/categories/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create categories in batch
     * @param {module:model/CreateUpdateBatchCategory} createUpdateBatchCategory Values to create a batch of categories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUpdateBatchCategoryModel}
     */
    this.createUpdateBatchCategory = function(createUpdateBatchCategory) {
      return this.createUpdateBatchCategoryWithHttpInfo(createUpdateBatchCategory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create products in batch
     * @param {module:model/CreateUpdateBatchProducts} createUpdateBatchProducts Values to create a batch of products
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUpdateBatchProductsModel} and HTTP response
     */
    this.createUpdateBatchProductsWithHttpInfo = function(createUpdateBatchProducts) {
      var postBody = createUpdateBatchProducts;

      // verify the required parameter 'createUpdateBatchProducts' is set
      if (createUpdateBatchProducts === undefined || createUpdateBatchProducts === null) {
        throw new Error("Missing the required parameter 'createUpdateBatchProducts' when calling createUpdateBatchProducts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUpdateBatchProductsModel;

      return this.apiClient.callApi(
        '/products/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create products in batch
     * @param {module:model/CreateUpdateBatchProducts} createUpdateBatchProducts Values to create a batch of products
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUpdateBatchProductsModel}
     */
    this.createUpdateBatchProducts = function(createUpdateBatchProducts) {
      return this.createUpdateBatchProductsWithHttpInfo(createUpdateBatchProducts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create/Update a category
     * @param {module:model/CreateUpdateCategory} createUpdateCategory Values to create/update a category
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCategoryModel} and HTTP response
     */
    this.createUpdateCategoryWithHttpInfo = function(createUpdateCategory) {
      var postBody = createUpdateCategory;

      // verify the required parameter 'createUpdateCategory' is set
      if (createUpdateCategory === undefined || createUpdateCategory === null) {
        throw new Error("Missing the required parameter 'createUpdateCategory' when calling createUpdateCategory");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCategoryModel;

      return this.apiClient.callApi(
        '/categories', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create/Update a category
     * @param {module:model/CreateUpdateCategory} createUpdateCategory Values to create/update a category
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCategoryModel}
     */
    this.createUpdateCategory = function(createUpdateCategory) {
      return this.createUpdateCategoryWithHttpInfo(createUpdateCategory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create/Update a product
     * @param {module:model/CreateUpdateProduct} createUpdateProduct Values to create/update a product
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProductModel} and HTTP response
     */
    this.createUpdateProductWithHttpInfo = function(createUpdateProduct) {
      var postBody = createUpdateProduct;

      // verify the required parameter 'createUpdateProduct' is set
      if (createUpdateProduct === undefined || createUpdateProduct === null) {
        throw new Error("Missing the required parameter 'createUpdateProduct' when calling createUpdateProduct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateProductModel;

      return this.apiClient.callApi(
        '/products', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create/Update a product
     * @param {module:model/CreateUpdateProduct} createUpdateProduct Values to create/update a product
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProductModel}
     */
    this.createUpdateProduct = function(createUpdateProduct) {
      return this.createUpdateProductWithHttpInfo(createUpdateProduct)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate the eCommerce app
     * Getting access to Brevo eCommerce.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.ecommerceActivatePostWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ecommerce/activate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Activate the eCommerce app
     * Getting access to Brevo eCommerce.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.ecommerceActivatePost = function() {
      return this.ecommerceActivatePostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all your categories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @param {Array.<String>} opts.ids Filter by category ids
     * @param {String} opts.name Filter by category name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCategories} and HTTP response
     */
    this.getCategoriesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'name': opts['name'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCategories;

      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all your categories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @param {Array.<String>} opts.ids Filter by category ids
     * @param {String} opts.name Filter by category name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCategories}
     */
    this.getCategories = function(opts) {
      return this.getCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a category details
     * @param {String} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCategoryDetails} and HTTP response
     */
    this.getCategoryInfoWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryInfo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCategoryDetails;

      return this.apiClient.callApi(
        '/categories/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a category details
     * @param {String} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCategoryDetails}
     */
    this.getCategoryInfo = function(id) {
      return this.getCategoryInfoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a product's details
     * @param {String} id Product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProductDetails} and HTTP response
     */
    this.getProductInfoWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductInfo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetProductDetails;

      return this.apiClient.callApi(
        '/products/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a product's details
     * @param {String} id Product ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProductDetails}
     */
    this.getProductInfo = function(id) {
      return this.getProductInfoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all your products
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @param {Array.<String>} opts.ids Filter by product ids
     * @param {String} opts.name Filter by product name, minimum 3 characters should be present for search
     * @param {Number} opts.priceLte Price filter for products less than and equals to particular amount
     * @param {Number} opts.priceGte Price filter for products greater than and equals to particular amount
     * @param {Number} opts.priceLt Price filter for products less than particular amount
     * @param {Number} opts.priceGt Price filter for products greater than particular amount
     * @param {Number} opts.priceEq Price filter for products equals to particular amount
     * @param {Number} opts.priceNe Price filter for products not equals to particular amount
     * @param {Array.<String>} opts.categories Filter by category ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProducts} and HTTP response
     */
    this.getProductsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'name': opts['name'],
        'price[lte]': opts['priceLte'],
        'price[gte]': opts['priceGte'],
        'price[lt]': opts['priceLt'],
        'price[gt]': opts['priceGt'],
        'price[eq]': opts['priceEq'],
        'price[ne]': opts['priceNe'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'categories': {
          value: opts['categories'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key', 'partner-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetProducts;

      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all your products
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:model/String} opts.sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (default to desc)
     * @param {Array.<String>} opts.ids Filter by product ids
     * @param {String} opts.name Filter by product name, minimum 3 characters should be present for search
     * @param {Number} opts.priceLte Price filter for products less than and equals to particular amount
     * @param {Number} opts.priceGte Price filter for products greater than and equals to particular amount
     * @param {Number} opts.priceLt Price filter for products less than particular amount
     * @param {Number} opts.priceGt Price filter for products greater than particular amount
     * @param {Number} opts.priceEq Price filter for products equals to particular amount
     * @param {Number} opts.priceNe Price filter for products not equals to particular amount
     * @param {Array.<String>} opts.categories Filter by category ids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProducts}
     */
    this.getProducts = function(opts) {
      return this.getProductsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
