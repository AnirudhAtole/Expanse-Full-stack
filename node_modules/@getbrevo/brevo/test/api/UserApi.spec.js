/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brevo.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('getInvitedUsersList', function() {
        it('should call getInvitedUsersList successfully', function(done) {
          // TODO: uncomment getInvitedUsersList call and complete the assertions
          /*

          instance.getInvitedUsersList().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetInvitedUsersList);
            {
              let dataCtr = data.users;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetInvitedUsersListUsers);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("pendingInvitedUser@company.com");
                expect(data.isOwner).to.be.a('string');
                expect(data.isOwner).to.be("true");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("active");
                expect(data.featureAccess).to.be.a(Brevo.GetInvitedUsersListFeatureAccess);
                      expect(data.featureAccess.marketing).to.be.a(Object);
                  expect(data.featureAccess.marketing).to.be(custom);
                  expect(data.featureAccess.conversations).to.be.a(Object);
                  expect(data.featureAccess.conversations).to.be(none);
                  expect(data.featureAccess.crm).to.be.a(Object);
                  expect(data.featureAccess.crm).to.be(full);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserPermission', function() {
        it('should call getUserPermission successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserPermission call and complete the assertions
          /*
          var email = "email_example";

          instance.getUserPermission(email).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetUserPermission);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("invitedUser@company.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("active");
            {
              let dataCtr = data.privileges;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetUserPermissionPrivileges);
                expect(data.feature).to.be.a('string');
                expect(data.feature).to.be("Email campaign");
                {
                  let dataCtr = data.permissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("Create / edit / delete");
                  }
                }

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
