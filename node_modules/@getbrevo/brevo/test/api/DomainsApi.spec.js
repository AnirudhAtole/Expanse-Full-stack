/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brevo.DomainsApi();
  });

  describe('(package)', function() {
    describe('DomainsApi', function() {
      describe('authenticateDomain', function() {
        it('should call authenticateDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for authenticateDomain call and complete the assertions
          /*
          var domainName = "domainName_example";

          instance.authenticateDomain(domainName).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.AuthenticateDomainModel);
            expect(data.domainName).to.be.a('string');
            expect(data.domainName).to.be("myexample.com");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("Domain has been authenticated successfully.");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDomain', function() {
        it('should call createDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for createDomain call and complete the assertions
          /*
          var opts = {};
          opts.domainName = new Brevo.CreateDomain();
          opts.domainName.name = "mycompany.com";

          instance.createDomain(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateDomainModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(5);
            expect(data.domainName).to.be.a('string');
            expect(data.domainName).to.be("true");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("Domain added successfully. To authenticate it, add following DNS records");
            expect(data.dnsRecords).to.be.a(Brevo.CreateDomainModelDnsRecords);
                  expect(data.dnsRecords.dkimRecord).to.be.a(Brevo.CreateDomainModelDnsRecordsDkimRecord);
                    expect(data.dnsRecords.dkimRecord.type).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.type).to.be("");
                expect(data.dnsRecords.dkimRecord.value).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.value).to.be("");
                expect(data.dnsRecords.dkimRecord.hostName).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.hostName).to.be("");
                expect(data.dnsRecords.dkimRecord.status).to.be.a('boolean');
                expect(data.dnsRecords.dkimRecord.status).to.be(false);
              expect(data.dnsRecords.brevoCode).to.be.a(Brevo.CreateDomainModelDnsRecordsDkimRecord);
                    expect(data.dnsRecords.brevoCode.type).to.be.a('string');
                expect(data.dnsRecords.brevoCode.type).to.be("");
                expect(data.dnsRecords.brevoCode.value).to.be.a('string');
                expect(data.dnsRecords.brevoCode.value).to.be("");
                expect(data.dnsRecords.brevoCode.hostName).to.be.a('string');
                expect(data.dnsRecords.brevoCode.hostName).to.be("");
                expect(data.dnsRecords.brevoCode.status).to.be.a('boolean');
                expect(data.dnsRecords.brevoCode.status).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDomain', function() {
        it('should call deleteDomain successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDomain call
          /*
          var domainName = "domainName_example";

          instance.deleteDomain(domainName).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDomainConfiguration', function() {
        it('should call getDomainConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for getDomainConfiguration call and complete the assertions
          /*
          var domainName = "domainName_example";

          instance.getDomainConfiguration(domainName).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetDomainConfigurationModel);
            expect(data.domain).to.be.a('string');
            expect(data.domain).to.be("myexample.com");
            expect(data.verified).to.be.a('boolean');
            expect(data.verified).to.be(true);
            expect(data.authenticated).to.be.a('boolean');
            expect(data.authenticated).to.be(false);
            expect(data.dnsRecords).to.be.a(Brevo.CreateDomainModelDnsRecords);
                  expect(data.dnsRecords.dkimRecord).to.be.a(Brevo.CreateDomainModelDnsRecordsDkimRecord);
                    expect(data.dnsRecords.dkimRecord.type).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.type).to.be("");
                expect(data.dnsRecords.dkimRecord.value).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.value).to.be("");
                expect(data.dnsRecords.dkimRecord.hostName).to.be.a('string');
                expect(data.dnsRecords.dkimRecord.hostName).to.be("");
                expect(data.dnsRecords.dkimRecord.status).to.be.a('boolean');
                expect(data.dnsRecords.dkimRecord.status).to.be(false);
              expect(data.dnsRecords.brevoCode).to.be.a(Brevo.CreateDomainModelDnsRecordsDkimRecord);
                    expect(data.dnsRecords.brevoCode.type).to.be.a('string');
                expect(data.dnsRecords.brevoCode.type).to.be("");
                expect(data.dnsRecords.brevoCode.value).to.be.a('string');
                expect(data.dnsRecords.brevoCode.value).to.be("");
                expect(data.dnsRecords.brevoCode.hostName).to.be.a('string');
                expect(data.dnsRecords.brevoCode.hostName).to.be("");
                expect(data.dnsRecords.brevoCode.status).to.be.a('boolean');
                expect(data.dnsRecords.brevoCode.status).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDomains', function() {
        it('should call getDomains successfully', function(done) {
          // TODO: uncomment getDomains call and complete the assertions
          /*

          instance.getDomains().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetDomainsList);
            {
              let dataCtr = data.domains;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetDomainsListDomains);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.domainName).to.be.a('string');
                expect(data.domainName).to.be("mycompany.com");
                expect(data.authenticated).to.be.a('boolean');
                expect(data.authenticated).to.be(true);
                expect(data.verified).to.be.a('boolean');
                expect(data.verified).to.be(false);
                expect(data.ip).to.be.a('string');
                expect(data.ip).to.be("123.98.689.7");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
