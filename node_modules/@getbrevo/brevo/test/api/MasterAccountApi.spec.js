/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brevo.MasterAccountApi();
  });

  describe('(package)', function() {
    describe('MasterAccountApi', function() {
      describe('corporateMasterAccountGet', function() {
        it('should call corporateMasterAccountGet successfully', function(done) {
          // TODO: uncomment corporateMasterAccountGet call and complete the assertions
          /*

          instance.corporateMasterAccountGet().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.MasterDetailsResponse);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("");
            expect(data.billingInfo).to.be.a(Brevo.MasterDetailsResponseBillingInfo);
                  expect(data.billingInfo.email).to.be.a('string');
              expect(data.billingInfo.email).to.be("");
              expect(data.billingInfo.companyName).to.be.a('string');
              expect(data.billingInfo.companyName).to.be("");
              expect(data.billingInfo.name).to.be.a(Brevo.MasterDetailsResponseBillingInfoName);
                    expect(data.billingInfo.name.givenName).to.be.a('string');
                expect(data.billingInfo.name.givenName).to.be("");
                expect(data.billingInfo.name.familyName).to.be.a('string');
                expect(data.billingInfo.name.familyName).to.be("");
              expect(data.billingInfo.address).to.be.a(Brevo.MasterDetailsResponseBillingInfoAddress);
                    expect(data.billingInfo.address.streetAddress).to.be.a('string');
                expect(data.billingInfo.address.streetAddress).to.be("");
                expect(data.billingInfo.address.locality).to.be.a('string');
                expect(data.billingInfo.address.locality).to.be("");
                expect(data.billingInfo.address.postalCode).to.be.a('string');
                expect(data.billingInfo.address.postalCode).to.be("");
                expect(data.billingInfo.address.stateCode).to.be.a('string');
                expect(data.billingInfo.address.stateCode).to.be("");
                expect(data.billingInfo.address.countryCode).to.be.a('string');
                expect(data.billingInfo.address.countryCode).to.be("");
            expect(data.planInfo).to.be.a(Brevo.MasterDetailsResponsePlanInfo);
                  expect(data.planInfo.currencyCode).to.be.a('string');
              expect(data.planInfo.currencyCode).to.be("");
              expect(data.planInfo.nextBillingAt).to.be.a('number');
              expect(data.planInfo.nextBillingAt).to.be("0");
              expect(data.planInfo.price).to.be.a('number');
              expect(data.planInfo.price).to.be();
              expect(data.planInfo.planPeriod).to.be.a('string');
              expect(data.planInfo.planPeriod).to.be("month");
              expect(data.planInfo.subAccounts).to.be.a('number');
              expect(data.planInfo.subAccounts).to.be(0);
              {
                let dataCtr = data.planInfo.features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Brevo.MasterDetailsResponsePlanInfoFeatures);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.unitValue).to.be.a('string');
                  expect(data.unitValue).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be("0");
                  expect(data.used).to.be.a('number');
                  expect(data.used).to.be("0");
                  expect(data.remaining).to.be.a('number');
                  expect(data.remaining).to.be("0");
  
                        }
              }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountGet', function() {
        it('should call corporateSubAccountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountGet call and complete the assertions
          /*
          var offset = 56;
          var limit = 56;

          instance.corporateSubAccountGet(offset, limit).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.SubAccountsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.subAccounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.SubAccountsResponseSubAccounts);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("");
                expect(data.active).to.be.a('boolean');
                expect(data.active).to.be(false);
                expect(data.createdAt).to.be.a('number');
                expect(data.createdAt).to.be("0");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountIdDelete', function() {
        it('should call corporateSubAccountIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountIdDelete call
          /*
          var id = 789;

          instance.corporateSubAccountIdDelete(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountIdGet', function() {
        it('should call corporateSubAccountIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountIdGet call and complete the assertions
          /*
          var id = 789;

          instance.corporateSubAccountIdGet(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.SubAccountDetailsResponse);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("");
            expect(data.planInfo).to.be.a(Brevo.SubAccountDetailsResponsePlanInfo);
                  expect(data.planInfo.credits).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoCredits);
                    expect(data.planInfo.credits.sms).to.be.a('number');
                expect(data.planInfo.credits.sms).to.be("0");
                expect(data.planInfo.credits.emails).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoCreditsEmails);
                      expect(data.planInfo.credits.emails.quantity).to.be.a('number');
                  expect(data.planInfo.credits.emails.quantity).to.be("0");
                  expect(data.planInfo.credits.emails.remaining).to.be.a('number');
                  expect(data.planInfo.credits.emails.remaining).to.be("0");
              expect(data.planInfo.features).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoFeatures);
                    expect(data.planInfo.features.inbox).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoFeaturesInbox);
                      expect(data.planInfo.features.inbox.quantity).to.be.a('number');
                  expect(data.planInfo.features.inbox.quantity).to.be("0");
                  expect(data.planInfo.features.inbox.remaining).to.be.a('number');
                  expect(data.planInfo.features.inbox.remaining).to.be("0");
                expect(data.planInfo.features.landingPage).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoFeaturesLandingPage);
                      expect(data.planInfo.features.landingPage.quantity).to.be.a('number');
                  expect(data.planInfo.features.landingPage.quantity).to.be("0");
                  expect(data.planInfo.features.landingPage.remaining).to.be.a('number');
                  expect(data.planInfo.features.landingPage.remaining).to.be("0");
                expect(data.planInfo.features.users).to.be.a(Brevo.SubAccountDetailsResponsePlanInfoFeaturesUsers);
                      expect(data.planInfo.features.users.quantity).to.be.a('number');
                  expect(data.planInfo.features.users.quantity).to.be("0");
                  expect(data.planInfo.features.users.remaining).to.be.a('number');
                  expect(data.planInfo.features.users.remaining).to.be("0");
              expect(data.planInfo.planType).to.be.a('string');
              expect(data.planInfo.planType).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountIdPlanPut', function() {
        it('should call corporateSubAccountIdPlanPut successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountIdPlanPut call
          /*
          var id = 789;
          var updatePlanDetails = new Brevo.SubAccountUpdatePlanRequest();
          updatePlanDetails.credits = new Brevo.SubAccountUpdatePlanRequestCredits();
          updatePlanDetails.credits.email = "0";
          updatePlanDetails.features = new Brevo.SubAccountUpdatePlanRequestFeatures();
          updatePlanDetails.features.users = "0";
          updatePlanDetails.features.landingPage = "0";
          updatePlanDetails.features.inbox = "0";

          instance.corporateSubAccountIdPlanPut(id, updatePlanDetails).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountKeyPost', function() {
        it('should call corporateSubAccountKeyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountKeyPost call and complete the assertions
          /*
          var createApiKeyRequest = new Brevo.CreateApiKeyRequest();
          createApiKeyRequest.id = 2333323;
          createApiKeyRequest.name = "My Api Key";

          instance.corporateSubAccountKeyPost(createApiKeyRequest).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateApiKeyResponse);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountPost', function() {
        it('should call corporateSubAccountPost successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountPost call and complete the assertions
          /*
          var subAccountCreate = new Brevo.CreateSubAccount();
          subAccountCreate.companyName = "";
          subAccountCreate.email = "";
          subAccountCreate.language = "en";
          subAccountCreate.timezone = "";

          instance.corporateSubAccountPost(subAccountCreate).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateSubAccountResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('corporateSubAccountSsoTokenPost', function() {
        it('should call corporateSubAccountSsoTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for corporateSubAccountSsoTokenPost call and complete the assertions
          /*
          var ssoTokenRequest = new Brevo.SsoTokenRequest();
          ssoTokenRequest.id = 2333323;
          ssoTokenRequest.email = "vipin+subaccount@brevo.com";
          ssoTokenRequest.target = "contacts";

          instance.corporateSubAccountSsoTokenPost(ssoTokenRequest).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetSsoToken);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("ede520dxxxxxxxxxxxx76d631fba2");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAccountActivity', function() {
        it('should call getAccountActivity successfully', function(done) {
          // TODO: uncomment, update parameter values for getAccountActivity call and complete the assertions
          /*
          var opts = {};
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";
          opts.limit = 10;
          opts.offset = 0;

          instance.getAccountActivity(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetAccountActivity);
            {
              let dataCtr = data.logs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetAccountActivityLogs);
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("login-success");
                expect(data._date).to.be.a('string');
                expect(data._date).to.be("2023-03-27T16:30:00Z");
                expect(data.userEmail).to.be.a('string');
                expect(data.userEmail).to.be("test@mycompany.com");
                expect(data.userIp).to.be.a('string');
                expect(data.userIp).to.be("192.158.1.38");
                expect(data.userAgent).to.be.a('string');
                expect(data.userAgent).to.be("Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
