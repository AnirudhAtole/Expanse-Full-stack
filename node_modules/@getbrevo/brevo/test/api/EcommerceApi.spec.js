/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brevo.EcommerceApi();
  });

  describe('(package)', function() {
    describe('EcommerceApi', function() {
      describe('createBatchOrder', function() {
        it('should call createBatchOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for createBatchOrder call
          /*
          var orderBatch = new Brevo.OrderBatch();
          orderBatch.orders = [new Brevo.Order()];
          orderBatch.orders[0].id = "14";
          orderBatch.orders[0].createdAt = "2021-07-29T20:59:23.383Z";
          orderBatch.orders[0].updatedAt = "2021-07-30T10:59:23.383Z";
          orderBatch.orders[0].status = "completed";
          orderBatch.orders[0].amount = 308.42;
          orderBatch.orders[0].products = [new Brevo.OrderProducts()];
          orderBatch.orders[0].products[0].productId = "P1";
          orderBatch.orders[0].products[0].quantity = 10.0;
          orderBatch.orders[0].products[0].variantId = "P100";
          orderBatch.orders[0].products[0].price = 99.99;
          orderBatch.orders[0].email = "example@brevo.com";
          orderBatch.orders[0].billing = new Brevo.OrderBilling();
          orderBatch.orders[0].billing.address = "15 Somewhere Road, Brynmenyn";
          orderBatch.orders[0].billing.city = "Basel";
          orderBatch.orders[0].billing.countryCode = "CA";
          orderBatch.orders[0].billing.phone = "01559 032133";
          orderBatch.orders[0].billing.postCode = "4052";
          orderBatch.orders[0].billing.paymentMethod = "PayPal";
          orderBatch.orders[0].billing.region = "Northwestern Switzerland";
          orderBatch.orders[0].coupons = ["EASTER15OFF"];
          orderBatch.notifyUrl = "https://en.wikipedia.org/wiki/Webhook";

          instance.createBatchOrder(orderBatch).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrder', function() {
        it('should call createOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrder call
          /*
          var order = new Brevo.Order();
          order.id = "14";
          order.createdAt = "2021-07-29T20:59:23.383Z";
          order.updatedAt = "2021-07-30T10:59:23.383Z";
          order.status = "completed";
          order.amount = 308.42;
          order.products = [new Brevo.OrderProducts()];
          order.products[0].productId = "P1";
          order.products[0].quantity = 10.0;
          order.products[0].variantId = "P100";
          order.products[0].price = 99.99;
          order.email = "example@brevo.com";
          order.billing = new Brevo.OrderBilling();
          order.billing.address = "15 Somewhere Road, Brynmenyn";
          order.billing.city = "Basel";
          order.billing.countryCode = "CA";
          order.billing.phone = "01559 032133";
          order.billing.postCode = "4052";
          order.billing.paymentMethod = "PayPal";
          order.billing.region = "Northwestern Switzerland";
          order.coupons = ["EASTER15OFF"];

          instance.createOrder(order).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUpdateBatchCategory', function() {
        it('should call createUpdateBatchCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for createUpdateBatchCategory call and complete the assertions
          /*
          var createUpdateBatchCategory = new Brevo.CreateUpdateBatchCategory();
          createUpdateBatchCategory.categories = [new Brevo.CreateUpdateCategories()];
          createUpdateBatchCategory.categories[0].id = "CAT123";
          createUpdateBatchCategory.categories[0].name = "Electronics";
          createUpdateBatchCategory.categories[0].url = "http://mydomain.com/category/electronics";
          createUpdateBatchCategory.categories[0].deletedAt = "2017-05-12T12:30:00Z";
          createUpdateBatchCategory.updateEnabled = false;

          instance.createUpdateBatchCategory(createUpdateBatchCategory).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateUpdateBatchCategoryModel);
            expect(data.createdCount).to.be.a('number');
            expect(data.createdCount).to.be(7);
            expect(data.updatedCount).to.be.a('number');
            expect(data.updatedCount).to.be(5);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUpdateBatchProducts', function() {
        it('should call createUpdateBatchProducts successfully', function(done) {
          // TODO: uncomment, update parameter values for createUpdateBatchProducts call and complete the assertions
          /*
          var createUpdateBatchProducts = new Brevo.CreateUpdateBatchProducts();
          createUpdateBatchProducts.products = [new Brevo.CreateUpdateProducts()];
          createUpdateBatchProducts.products[0].id = "P11";
          createUpdateBatchProducts.products[0].name = "Iphone 11";
          createUpdateBatchProducts.products[0].url = "http://mydomain.com/product/electronics/product1";
          createUpdateBatchProducts.products[0].imageUrl = "http://mydomain.com/product-absoulte-url/img.jpeg";
          createUpdateBatchProducts.products[0].sku = "";
          createUpdateBatchProducts.products[0].price = 0.0;
          createUpdateBatchProducts.products[0].categories = [""];
          createUpdateBatchProducts.products[0].parentId = "";
          createUpdateBatchProducts.products[0].metaInfo = {"description":"Shoes for sports","brand":"addidas"};
          createUpdateBatchProducts.products[0].deletedAt = "2017-05-12T12:30:00Z";
          createUpdateBatchProducts.updateEnabled = false;

          instance.createUpdateBatchProducts(createUpdateBatchProducts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateUpdateBatchProductsModel);
            expect(data.createdCount).to.be.a('number');
            expect(data.createdCount).to.be(7);
            expect(data.updatedCount).to.be.a('number');
            expect(data.updatedCount).to.be(5);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUpdateCategory', function() {
        it('should call createUpdateCategory successfully', function(done) {
          // TODO: uncomment, update parameter values for createUpdateCategory call and complete the assertions
          /*
          var createUpdateCategory = new Brevo.CreateUpdateCategory();
          createUpdateCategory.id = "CAT123";
          createUpdateCategory.name = "Electronics";
          createUpdateCategory.url = "http://mydomain.com/category/electronics";
          createUpdateCategory.updateEnabled = false;
          createUpdateCategory.deletedAt = "2017-05-12T12:30:00Z";

          instance.createUpdateCategory(createUpdateCategory).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateCategoryModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUpdateProduct', function() {
        it('should call createUpdateProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for createUpdateProduct call and complete the assertions
          /*
          var createUpdateProduct = new Brevo.CreateUpdateProduct();
          createUpdateProduct.id = "P11";
          createUpdateProduct.name = "Iphone 11";
          createUpdateProduct.url = "http://mydomain.com/product/electronics/product1";
          createUpdateProduct.imageUrl = "http://mydomain.com/product-absoulte-url/img.jpeg";
          createUpdateProduct.sku = "";
          createUpdateProduct.price = 0.0;
          createUpdateProduct.categories = [""];
          createUpdateProduct.parentId = "";
          createUpdateProduct.metaInfo = {"description":"Shoes for sports","brand":"addidas"};
          createUpdateProduct.updateEnabled = false;
          createUpdateProduct.deletedAt = "2017-05-12T12:30:00Z";

          instance.createUpdateProduct(createUpdateProduct).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.CreateProductModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(122);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ecommerceActivatePost', function() {
        it('should call ecommerceActivatePost successfully', function(done) {
          // TODO: uncomment ecommerceActivatePost call
          /*

          instance.ecommerceActivatePost().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCategories', function() {
        it('should call getCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getCategories call and complete the assertions
          /*
          var opts = {};
          opts.limit = 50;
          opts.offset = 0;
          opts.sort = "desc";
          opts.ids = ["ids_example"];
          opts.name = "name_example";

          instance.getCategories(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetCategories);
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(17655);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCategoryInfo', function() {
        it('should call getCategoryInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getCategoryInfo call and complete the assertions
          /*
          var id = "id_example";

          instance.getCategoryInfo(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetCategoryDetails);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("C11");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Electronics");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("2017-05-12T12:30:00Z");
            expect(data.modifiedAt).to.be.a('string');
            expect(data.modifiedAt).to.be("2017-05-12T12:30:00Z");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("http://mydomain.com/category/clothing");
            expect(data.isDeleted).to.be.a('boolean');
            expect(data.isDeleted).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProductInfo', function() {
        it('should call getProductInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getProductInfo call and complete the assertions
          /*
          var id = "id_example";

          instance.getProductInfo(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetProductDetails);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("P11");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Iphone 11");
            expect(data.createdAt).to.be.a('string');
            expect(data.createdAt).to.be("2017-05-12T12:30:00Z");
            expect(data.modifiedAt).to.be.a('string');
            expect(data.modifiedAt).to.be("2017-05-12T12:30:00Z");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("http://mydomain.com/product/electronics/product1");
            expect(data.imageUrl).to.be.a('string');
            expect(data.imageUrl).to.be("http://mydomain.com/product-absoulte-url/img.jpeg");
            expect(data.sku).to.be.a('string');
            expect(data.sku).to.be("");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.0);
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.parentId).to.be.a('string');
            expect(data.parentId).to.be("");
            expect(data.s3Original).to.be.a('string');
            expect(data.s3Original).to.be("");
            expect(data.s3ThumbAnalytics).to.be.a('string');
            expect(data.s3ThumbAnalytics).to.be("");
            expect(data.metaInfo).to.be.a(Object);
            expect(data.metaInfo).to.be({"description":"Shoes for sports","brand":"addidas"});
            expect(data.s3ThumbEditor).to.be.a('string');
            expect(data.s3ThumbEditor).to.be("");
            expect(data.isDeleted).to.be.a('boolean');
            expect(data.isDeleted).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProducts', function() {
        it('should call getProducts successfully', function(done) {
          // TODO: uncomment, update parameter values for getProducts call and complete the assertions
          /*
          var opts = {};
          opts.limit = 50;
          opts.offset = 0;
          opts.sort = "desc";
          opts.ids = ["ids_example"];
          opts.name = "name_example";
          opts.priceLte = 8.14;
          opts.priceGte = 8.14;
          opts.priceLt = 8.14;
          opts.priceGt = 8.14;
          opts.priceEq = 8.14;
          opts.priceNe = 8.14;
          opts.categories = ["categories_example"];

          instance.getProducts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetProducts);
            {
              let dataCtr = data.products;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(17655);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
