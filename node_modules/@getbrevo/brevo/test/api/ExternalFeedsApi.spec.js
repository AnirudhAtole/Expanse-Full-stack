/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brevo.ExternalFeedsApi();
  });

  describe('(package)', function() {
    describe('ExternalFeedsApi', function() {
      describe('createExternalFeed', function() {
        it('should call createExternalFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for createExternalFeed call and complete the assertions
          /*
          var createExternalFeed = new Brevo.CreateExternalFeed();
          createExternalFeed.name = "New feed";
          createExternalFeed.url = "http://requestb.in/173lyyx1";
          createExternalFeed.authType = "basic";
          createExternalFeed.username = "user";
          createExternalFeed.password = "password";
          createExternalFeed.token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
          createExternalFeed.headers = [{"name":"header1","value":"value1"},{"name":"header2","value":"value2"}];
          createExternalFeed.headers[0].name = "userId";
          createExternalFeed.headers[0].value = "user12345";
          createExternalFeed.maxRetries = 5;
          createExternalFeed.cache = true;

          instance.createExternalFeed(createExternalFeed).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.InlineResponse2014);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("23befbae-1505-47a8-bd27-e30ef739f32c");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteExternalFeed', function() {
        it('should call deleteExternalFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteExternalFeed call
          /*
          var uuid = "uuid_example";

          instance.deleteExternalFeed(uuid).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllExternalFeeds', function() {
        it('should call getAllExternalFeeds successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllExternalFeeds call and complete the assertions
          /*
          var opts = {};
          opts.search = "search_example";
          opts.startDate = new Date("2013-10-20");
          opts.endDate = new Date("2013-10-20");
          opts.sort = "desc";
          opts.authType = "authType_example";
          opts.limit = 50;
          opts.offset = 0;

          instance.getAllExternalFeeds(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetAllExternalFeeds);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.feeds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetAllExternalFeedsFeeds);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("54377442-20a2-4c20-b761-d636c72de7b7");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("New feed");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("http://requestb.in/173lyyx1");
                expect(data.authType).to.be.a('string');
                expect(data.authType).to.be("basic");
                expect(data.username).to.be.a('string');
                expect(data.username).to.be("user");
                expect(data.password).to.be.a('string');
                expect(data.password).to.be("password");
                expect(data.token).to.be.a('string');
                expect(data.token).to.be("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c");
                {
                  let dataCtr = data.headers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Brevo.GetExternalFeedByUUIDHeaders);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("userId");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("user12345");
    
                          }
                }
                expect(data.maxRetries).to.be.a('number');
                expect(data.maxRetries).to.be(5);
                expect(data.cache).to.be.a('boolean');
                expect(data.cache).to.be(true);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2022-10-06T05:03:47.053000000Z);
                expect(data.modifiedAt).to.be.a(Date);
                expect(data.modifiedAt).to.be(2022-10-06T05:03:47.053000000Z);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalFeedByUUID', function() {
        it('should call getExternalFeedByUUID successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalFeedByUUID call and complete the assertions
          /*
          var uuid = "uuid_example";

          instance.getExternalFeedByUUID(uuid).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(Brevo.GetExternalFeedByUUID);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("54377442-20a2-4c20-b761-d636c72de7b7");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("New feed");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("http://requestb.in/173lyyx1");
            expect(data.authType).to.be.a('string');
            expect(data.authType).to.be("basic");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("user");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("password");
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c");
            {
              let dataCtr = data.headers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Brevo.GetExternalFeedByUUIDHeaders);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("userId");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("user12345");

                      }
            }
            expect(data.maxRetries).to.be.a('number');
            expect(data.maxRetries).to.be(5);
            expect(data.cache).to.be.a('boolean');
            expect(data.cache).to.be(true);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2022-10-06T05:03:47.053000000Z);
            expect(data.modifiedAt).to.be.a(Date);
            expect(data.modifiedAt).to.be(2022-10-06T05:03:47.053000000Z);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateExternalFeed', function() {
        it('should call updateExternalFeed successfully', function(done) {
          // TODO: uncomment, update parameter values for updateExternalFeed call
          /*
          var uuid = "uuid_example";
          var updateExternalFeed = new Brevo.UpdateExternalFeed();
          updateExternalFeed.name = "New feed";
          updateExternalFeed.url = "http://requestb.in/173lyyx1";
          updateExternalFeed.authType = "basic";
          updateExternalFeed.username = "user";
          updateExternalFeed.password = "password";
          updateExternalFeed.token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
          updateExternalFeed.headers = [{"name":"header1","value":"value1"},{"name":"header2","value":"value2"}];
          updateExternalFeed.headers[0].name = "userId";
          updateExternalFeed.headers[0].value = "user12345";
          updateExternalFeed.maxRetries = 5;
          updateExternalFeed.cache = true;

          instance.updateExternalFeed(uuid, updateExternalFeed).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
