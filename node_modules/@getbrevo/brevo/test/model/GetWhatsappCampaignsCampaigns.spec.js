/*
 * Brevo API
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@brevo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brevo);
  }
}(this, function(expect, Brevo) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetWhatsappCampaignsCampaigns', function() {
      beforeEach(function() {
        instance = new Brevo.GetWhatsappCampaignsCampaigns();
      });

      it('should create an instance of GetWhatsappCampaignsCampaigns', function() {
        // TODO: update the code to test GetWhatsappCampaignsCampaigns
        expect(instance).to.be.a(Brevo.GetWhatsappCampaignsCampaigns);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property campaignName (base name: "campaignName")', function() {
        // TODO: update the code to test the property campaignName
        expect(instance).to.have.property('campaignName');
        // expect(instance.campaignName).to.be(expectedValueLiteral);
      });

      it('should have the property templateId (base name: "templateId")', function() {
        // TODO: update the code to test the property templateId
        expect(instance).to.have.property('templateId');
        // expect(instance.templateId).to.be(expectedValueLiteral);
      });

      it('should have the property campaignStatus (base name: "campaignStatus")', function() {
        // TODO: update the code to test the property campaignStatus
        expect(instance).to.have.property('campaignStatus');
        // expect(instance.campaignStatus).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledAt (base name: "scheduledAt")', function() {
        // TODO: update the code to test the property scheduledAt
        expect(instance).to.have.property('scheduledAt');
        // expect(instance.scheduledAt).to.be(expectedValueLiteral);
      });

      it('should have the property errorReason (base name: "errorReason")', function() {
        // TODO: update the code to test the property errorReason
        expect(instance).to.have.property('errorReason');
        // expect(instance.errorReason).to.be(expectedValueLiteral);
      });

      it('should have the property invalidatedContacts (base name: "invalidatedContacts")', function() {
        // TODO: update the code to test the property invalidatedContacts
        expect(instance).to.have.property('invalidatedContacts');
        // expect(instance.invalidatedContacts).to.be(expectedValueLiteral);
      });

      it('should have the property readPercentage (base name: "readPercentage")', function() {
        // TODO: update the code to test the property readPercentage
        expect(instance).to.have.property('readPercentage');
        // expect(instance.readPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property stats (base name: "stats")', function() {
        // TODO: update the code to test the property stats
        expect(instance).to.have.property('stats');
        // expect(instance.stats).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedAt (base name: "modifiedAt")', function() {
        // TODO: update the code to test the property modifiedAt
        expect(instance).to.have.property('modifiedAt');
        // expect(instance.modifiedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
